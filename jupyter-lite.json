{
  "jupyter-config-data": {
    "appName": "JupyterLite",
    "appUrl": "./lab",
    "appVersion": "0.1.0-beta.12",
    "baseUrl": "./",
    "defaultKernelName": "python",
    "faviconUrl": "./lab/favicon.ico",
    "federated_extensions": [
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.1bd01b57743def902f73.js",
        "name": "@jupyter-widgets/jupyterlab-manager"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.e84826446ca2e8c10352.js",
        "name": "@jupyterlab/server-proxy"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.a37a9842aacd9bb31ce6.js",
        "name": "@voila-dashboards/jupyterlab-gridstack",
        "style": "./style"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.65014cb58c79e1651a0a.js",
        "name": "@voila-dashboards/jupyterlab-preview",
        "style": "./style"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.c6d7a064206743806fd4.js",
        "name": "ipyflex"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.826666d2e0fe36d6609e.js",
        "name": "jupyter-leaflet"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.a111cc73e550f743ab57.js",
        "name": "jupyter-vue"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.0b6a37985538f1f2120b.js",
        "name": "jupyter-vuetify"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.3ba0917230bd85b2e16b.js",
        "name": "jupyter_app_launcher",
        "style": "./style"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.249e02ea9427f8cca2ad.js",
        "mimeExtension": "./mimeExtension",
        "name": "jupyterlab-plotly"
      },
      {
        "extension": "./extension",
        "liteExtension": false,
        "load": "static/remoteEntry.aa1060b2d1221f8e5688.js",
        "name": "jupyterlab_pygments",
        "style": "./style"
      }
    ],
    "fileTypes": {
      "css": {
        "extensions": [
          ".css"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/css"
        ],
        "name": "css"
      },
      "csv": {
        "extensions": [
          ".csv"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/csv"
        ],
        "name": "csv"
      },
      "fasta": {
        "extensions": [
          ".fasta"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/plain"
        ],
        "name": "fasta"
      },
      "geojson": {
        "extensions": [
          ".geojson"
        ],
        "fileFormat": "json",
        "mimeTypes": [
          "application/geo+json"
        ],
        "name": "geojson"
      },
      "gzip": {
        "extensions": [
          ".tgz",
          ".gz",
          ".gzip"
        ],
        "fileFormat": "base64",
        "mimeTypes": [
          "application/gzip"
        ],
        "name": "gzip"
      },
      "html": {
        "extensions": [
          ".html"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/html"
        ],
        "name": "html"
      },
      "ical": {
        "extensions": [
          ".ical",
          ".ics",
          ".ifb",
          ".icalendar"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/calendar"
        ],
        "name": "ical"
      },
      "ico": {
        "extensions": [
          ".ico"
        ],
        "fileFormat": "base64",
        "mimeTypes": [
          "image/x-icon"
        ],
        "name": "ico"
      },
      "ipynb": {
        "extensions": [
          ".ipynb"
        ],
        "fileFormat": "json",
        "mimeTypes": [
          "application/x-ipynb+json"
        ],
        "name": "ipynb"
      },
      "jpeg": {
        "extensions": [
          ".jpeg",
          ".jpg"
        ],
        "fileFormat": "base64",
        "mimeTypes": [
          "image/jpeg"
        ],
        "name": "jpeg"
      },
      "js": {
        "extensions": [
          ".js",
          ".mjs"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "application/javascript"
        ],
        "name": "js"
      },
      "jsmap": {
        "extensions": [
          ".map"
        ],
        "fileFormat": "json",
        "mimeTypes": [
          "application/json"
        ],
        "name": "jsmap"
      },
      "json": {
        "extensions": [
          ".json"
        ],
        "fileFormat": "json",
        "mimeTypes": [
          "application/json"
        ],
        "name": "json"
      },
      "manifest": {
        "extensions": [
          ".manifest"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/cache-manifest"
        ],
        "name": "manifest"
      },
      "md": {
        "extensions": [
          ".md",
          ".markdown"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/markdown"
        ],
        "name": "md"
      },
      "pdf": {
        "extensions": [
          ".pdf"
        ],
        "fileFormat": "base64",
        "mimeTypes": [
          "application/pdf"
        ],
        "name": "pdf"
      },
      "plain": {
        "extensions": [
          ".txt"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/plain"
        ],
        "name": "plain"
      },
      "png": {
        "extensions": [
          ".png"
        ],
        "fileFormat": "base64",
        "mimeTypes": [
          "image/png"
        ],
        "name": "png"
      },
      "py": {
        "extensions": [
          ".py"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/x-python",
          "application/x-python-code"
        ],
        "name": "py"
      },
      "svg": {
        "extensions": [
          ".svg"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "image/svg+xml"
        ],
        "name": "svg"
      },
      "toml": {
        "extensions": [
          ".toml"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "application/toml"
        ],
        "name": "toml"
      },
      "vue": {
        "extensions": [
          ".vue"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "text/plain"
        ],
        "name": "vue"
      },
      "wasm": {
        "extensions": [
          ".wasm"
        ],
        "fileFormat": "base64",
        "mimeTypes": [
          "application/wasm"
        ],
        "name": "wasm"
      },
      "wheel": {
        "extensions": [
          ".whl"
        ],
        "fileFormat": "base64",
        "mimeTypes": [
          "octet/stream",
          "application/x-wheel+zip"
        ],
        "name": "wheel"
      },
      "xml": {
        "extensions": [
          ".xml"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "application/xml"
        ],
        "name": "xml"
      },
      "yaml": {
        "extensions": [
          ".yaml",
          ".yml"
        ],
        "fileFormat": "text",
        "mimeTypes": [
          "application/x-yaml"
        ],
        "name": "yaml"
      }
    },
    "fullLabextensionsUrl": "./extensions",
    "fullMathjaxUrl": "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js",
    "fullStaticUrl": "./build",
    "licensesUrl": "./lab/api/licenses",
    "mathjaxConfig": "TeX-AMS_CHTML-full,Safe",
    "settingsOverrides": {
      "appLauncherData": {
        "config": [
          {
            "catalog": "Stock dashboard",
            "cwd": "/home/runner/work/jupyter_app_launcher/jupyter_app_launcher/samples",
            "description": "Nvidia stock dashboard",
            "id": "ba8b7e4c-10e2-4b43-a4c9-4b6d8ab462a9",
            "source": "/home/runner/work/jupyter_app_launcher/jupyter_app_launcher/samples/stock.ipynb",
            "sourceCode": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"try:\\n\",\n    \"    import piplite\\n\",\n    \"    await piplite.install(['ipywidgets==7.7.0', 'ipyflex', 'ipyvuetify', 'plotly', 'pandas'])\\n\",\n    \"except:\\n\",\n    \"    pass\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"from datetime import datetime\\n\",\n    \"import ipyvuetify as v\\n\",\n    \"import ipywidgets as ipw\\n\",\n    \"from ipyflex import FlexLayout\\n\",\n    \"import pandas\\n\",\n    \"import json\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"class TickerData:\\n\",\n    \"    def __init__(self, ticker: str) -> None:\\n\",\n    \"        ticker = ticker.upper()\\n\",\n    \"        self.fetch_ticker(ticker)\\n\",\n    \"\\n\",\n    \"    def fetch_ticker(self, ticker: str):\\n\",\n    \"        with open('data.json', 'r') as f:\\n\",\n    \"            cache = json.load(f)\\n\",\n    \"        self._cached_data = cache.get(ticker, None)\\n\",\n    \"        if self._cached_data:\\n\",\n    \"            self._info = self._cached_data['data']['info']\\n\",\n    \"            self.news = self._cached_data['data']['news']\\n\",\n    \"            self._price = pandas.DataFrame.from_dict(self._cached_data['price'])\\n\",\n    \"            # self._price.index = [datetime.fromtimestamp(int(x)/1000) for x in self._price.index]\\n\",\n    \"            self._balance_sheet = pandas.DataFrame.from_dict(self._cached_data['balance_sheet'])\\n\",\n    \"            self._analysis = pandas.DataFrame.from_dict(self._cached_data['analysis'])\\n\",\n    \"    @property\\n\",\n    \"    def financial_info(self):\\n\",\n    \"        data = [\\n\",\n    \"            {'title': 'Market cap', 'value': self._info['marketCap']},\\n\",\n    \"            {'title': 'PE Ratio', 'value': self._info['forwardPE']},\\n\",\n    \"            {'title': 'Total revenue', 'value': self._info['totalRevenue']},\\n\",\n    \"            {'title': 'Gross profit', 'value': self._info['grossProfits']},\\n\",\n    \"            {'title': 'Debt to equity', 'value': self._info['debtToEquity']},\\n\",\n    \"            {'title': 'Profit margin', 'value': self._info['profitMargins']},\\n\",\n    \"        ]\\n\",\n    \"        return data\\n\",\n    \"\\n\",\n    \"    def price(self):\\n\",\n    \"        return self._price\\n\",\n    \"\\n\",\n    \"    @property\\n\",\n    \"    def balance_sheet(self):\\n\",\n    \"        return self._balance_sheet\\n\",\n    \"\\n\",\n    \"    @property\\n\",\n    \"    def analysis(self):\\n\",\n    \"        return self._analysis.transpose()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"\\n\",\n    \"from typing import Dict, List\\n\",\n    \"import json\\n\",\n    \"import ipyvuetify as v\\n\",\n    \"import ipywidgets as ipw\\n\",\n    \"import plotly.graph_objects as go\\n\",\n    \"from plotly.subplots import make_subplots\\n\",\n    \"\\n\",\n    \"v.theme.dark = True\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def new_factory(news: List[Dict]) -> v.Html:\\n\",\n    \"    children = []\\n\",\n    \"    for new in news:\\n\",\n    \"        date = datetime.fromtimestamp(new['providerPublishTime'])\\n\",\n    \"        btn = v.Btn(\\n\",\n    \"            small=True,\\n\",\n    \"            text=True,\\n\",\n    \"            block=True,\\n\",\n    \"            children=['Open'],\\n\",\n    \"            href=new['link'],\\n\",\n    \"            target='_blank',\\n\",\n    \"        )\\n\",\n    \"        card = v.Card(\\n\",\n    \"            outlined=True,\\n\",\n    \"            children=[\\n\",\n    \"                v.CardTitle(\\n\",\n    \"                    children=[new['title']],\\n\",\n    \"                    style_='font-size: 1.1rem',\\n\",\n    \"                ),\\n\",\n    \"                v.CardSubtitle(\\n\",\n    \"                    children=[\\n\",\n    \"                        f'{new[\\\"publisher\\\"]} ({date.strftime(\\\"%m/%d/%Y, %H:%M\\\")})'\\n\",\n    \"                    ]\\n\",\n    \"                ),\\n\",\n    \"                v.CardActions(children=[btn]),\\n\",\n    \"            ],\\n\",\n    \"        )\\n\",\n    \"        children.append(card)\\n\",\n    \"    return v.Html(tag='div', class_='d-flex flex-column', children=children)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def financial_info_factory(data: List[Dict], logo_url: str = None) -> v.Html:\\n\",\n    \"    children = []\\n\",\n    \"    if logo_url is not None:\\n\",\n    \"        logo = v.Card(\\n\",\n    \"            outlined=True,\\n\",\n    \"            class_='ma-1',\\n\",\n    \"            children=[v.Img(src=logo_url, height='100px', contain=True)],\\n\",\n    \"            style_='width: calc(14.28% - 8px); min-width: 150px',\\n\",\n    \"        )\\n\",\n    \"        children.append(logo)\\n\",\n    \"\\n\",\n    \"    for item in data:\\n\",\n    \"        card = v.Card(\\n\",\n    \"            outlined=True,\\n\",\n    \"            class_='ma-1',\\n\",\n    \"            children=[\\n\",\n    \"                v.CardTitle(\\n\",\n    \"                    primary_title=True,\\n\",\n    \"                    children=[item['title']],\\n\",\n    \"                    style_='font-size: 18px; color: #51ef98',\\n\",\n    \"                ),\\n\",\n    \"                v.CardText(children=[str(item['value'])]),\\n\",\n    \"            ],\\n\",\n    \"            style_='width: calc(14.28% - 8px); min-width: 150px',\\n\",\n    \"        )\\n\",\n    \"        children.append(card)\\n\",\n    \"    return v.Html(\\n\",\n    \"        tag='div',\\n\",\n    \"        class_='d-flex flex-row',\\n\",\n    \"        children=children,\\n\",\n    \"        style_='flex-wrap: wrap',\\n\",\n    \"    )\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def price_chart_factory(df: List, ticker: str = '') -> ipw.Widget:\\n\",\n    \"    # Create figure with secondary y-axis\\n\",\n    \"    fig = make_subplots(specs=[[{'secondary_y': True}]])\\n\",\n    \"    index = [datetime.fromtimestamp(int(x)/1000).strftime('%m/%d') for x in df.index]\\n\",\n    \"    # include candlestick with rangeselector\\n\",\n    \"    fig.add_trace(\\n\",\n    \"        go.Candlestick(\\n\",\n    \"            x=index,\\n\",\n    \"            open=df['Open'],\\n\",\n    \"            high=df['High'],\\n\",\n    \"            low=df['Low'],\\n\",\n    \"            close=df['Close'],\\n\",\n    \"            name='OHLC',\\n\",\n    \"        ),\\n\",\n    \"        secondary_y=True,\\n\",\n    \"    )\\n\",\n    \"    fig.add_trace(\\n\",\n    \"        go.Bar(\\n\",\n    \"            x=index,\\n\",\n    \"            y=df['Volume'],\\n\",\n    \"            marker_color='rgba(91, 91, 91, 0.73)',\\n\",\n    \"            name='Volume',\\n\",\n    \"        ),\\n\",\n    \"        secondary_y=False,\\n\",\n    \"    )\\n\",\n    \"\\n\",\n    \"    fig.layout.yaxis2.showgrid = False\\n\",\n    \"    fig.update_layout(\\n\",\n    \"        autosize=True,\\n\",\n    \"        xaxis_rangeslider_visible=False,\\n\",\n    \"        template='plotly_dark',\\n\",\n    \"        title={\\n\",\n    \"            'text': f'{ticker.upper()} PRICE CHART',\\n\",\n    \"            'xanchor': 'center',\\n\",\n    \"            'yanchor': 'top',\\n\",\n    \"            'x': 0.5,\\n\",\n    \"        },\\n\",\n    \"    )\\n\",\n    \"    widget = go.FigureWidget(fig, layout=ipw.Layout(height='100%'))\\n\",\n    \"    return widget\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def price_history_factory(df: List, ticker: str = '') -> ipw.Widget:\\n\",\n    \"    # include candlestick with rangeselector\\n\",\n    \"    index = [datetime.fromtimestamp(int(x)/1000).strftime('%m/%d') for x in df.index]\\n\",\n    \"    widget = go.FigureWidget(go.Scatter(x=index, y=df['Close']))\\n\",\n    \"    widget.update_layout(\\n\",\n    \"        autosize=True,\\n\",\n    \"        template='plotly_dark',\\n\",\n    \"        title={\\n\",\n    \"            'text': f'{ticker.upper()} PRICE HISTORY',\\n\",\n    \"            'xanchor': 'center',\\n\",\n    \"            'yanchor': 'top',\\n\",\n    \"            'x': 0.5,\\n\",\n    \"        },\\n\",\n    \"    )\\n\",\n    \"    return widget\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def text_widget(title: str, text: str) -> ipw.Widget:\\n\",\n    \"    return v.Card(\\n\",\n    \"        outlined=True,\\n\",\n    \"        children=[\\n\",\n    \"            v.CardTitle(\\n\",\n    \"                children=[title],\\n\",\n    \"                style_='font-size: 1.1rem',\\n\",\n    \"            ),\\n\",\n    \"            v.CardText(children=[text]),\\n\",\n    \"        ],\\n\",\n    \"    )\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def balance_sheet_factory(df) -> ipw.Widget:\\n\",\n    \"    items = []\\n\",\n    \"    for i in range(df.shape[0]):\\n\",\n    \"        row = df.iloc[i]\\n\",\n    \"        item = {'name': row.name}\\n\",\n    \"        item.update(json.loads(row.to_json()))\\n\",\n    \"        items.append(item)\\n\",\n    \"    titles = [x for x in items[0].keys() if x != 'name']\\n\",\n    \"    headers = [\\n\",\n    \"        {\\n\",\n    \"            'text': 'Property',\\n\",\n    \"            'align': 'start',\\n\",\n    \"            'sortable': False,\\n\",\n    \"            'value': 'name',\\n\",\n    \"        }\\n\",\n    \"    ]\\n\",\n    \"    for title in titles:\\n\",\n    \"        date = datetime.fromtimestamp(int(title) / 1000)\\n\",\n    \"        header = {'text': date.strftime('%m/%d/%Y, %H:%M'), 'value': title}\\n\",\n    \"        headers.append(header)\\n\",\n    \"    return v.DataTable(\\n\",\n    \"        headers=headers,\\n\",\n    \"        items=items,\\n\",\n    \"    )\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def analysis_factory(df) -> ipw.Widget:\\n\",\n    \"    items = []\\n\",\n    \"    for i in range(df.shape[0]):\\n\",\n    \"        row = df.iloc[i]\\n\",\n    \"        item = {'name': row.name}\\n\",\n    \"        item.update(json.loads(row.to_json()))\\n\",\n    \"        items.append(item)\\n\",\n    \"    titles = [x for x in items[0].keys() if x != 'name']\\n\",\n    \"    headers = [\\n\",\n    \"        {\\n\",\n    \"            'text': 'Property',\\n\",\n    \"            'align': 'start',\\n\",\n    \"            'sortable': False,\\n\",\n    \"            'value': 'name',\\n\",\n    \"        }\\n\",\n    \"    ]\\n\",\n    \"    for title in titles:\\n\",\n    \"        header = {'text': title, 'value': title}\\n\",\n    \"        headers.append(header)\\n\",\n    \"    return v.DataTable(\\n\",\n    \"        headers=headers,\\n\",\n    \"        items=items,\\n\",\n    \"    )\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"editable = False\\n\",\n    \"height = \\\"900px\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"ticker_name = \\\"NVDA\\\"\\n\",\n    \"ticker = TickerData(ticker_name)\\n\",\n    \"news = new_factory(ticker.news)\\n\",\n    \"info = financial_info_factory(ticker.financial_info, ticker._info[\\\"logo_url\\\"])\\n\",\n    \"price = price_chart_factory(ticker.price(), ticker_name)\\n\",\n    \"history = price_history_factory(ticker.price(), ticker_name)\\n\",\n    \"summary = text_widget(\\\"Business Summary \\\", ticker._info[\\\"longBusinessSummary\\\"])\\n\",\n    \"balance_sheet = balance_sheet_factory(ticker.balance_sheet)\\n\",\n    \"analysis = analysis_factory(ticker.analysis)\\n\",\n    \"widgets = {\\n\",\n    \"    \\\"news\\\": news,\\n\",\n    \"    \\\"info\\\": info,\\n\",\n    \"    \\\"price\\\": price,\\n\",\n    \"    \\\"history\\\": history,\\n\",\n    \"    \\\"summary\\\": summary,\\n\",\n    \"    \\\"balance_sheet\\\": balance_sheet,\\n\",\n    \"    \\\"analysis\\\": analysis\\n\",\n    \"}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"w = FlexLayout(\\n\",\n    \"    widgets,\\n\",\n    \"    style={\\\"height\\\": height},\\n\",\n    \"    header={\\\"title\\\": \\\"STOCK DASHBOAD\\\", \\\"style\\\": {\\\"backgroundColor\\\": \\\"rgb(53 53 53)\\\"}, \\\"buttons\\\":[\\\"export\\\",\\\"import\\\"]},\\n\",\n    \"    template=\\\"ticker2.json\\\",\\n\",\n    \"    editable=False,\\n\",\n    \")\\n\",\n    \"style = ipw.HTML(\\\"\\\"\\\"<style>.js-plotly-plot {height: 100%;}</style> \\\"\\\"\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 0,\n        \"height\": 24,\n        \"hidden\": false,\n        \"locked\": true,\n        \"row\": 0,\n        \"width\": 12\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"w\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"extensions\": {\n   \"jupyter_dashboards\": {\n    \"activeView\": \"grid_default\",\n    \"version\": 1,\n    \"views\": {\n     \"grid_default\": {\n      \"cellMargin\": 2,\n      \"defaultCellHeight\": 40,\n      \"maxColumns\": 12,\n      \"name\": \"grid\",\n      \"type\": \"grid\"\n     }\n    }\n   }\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.6\"\n  },\n  \"vscode\": {\n   \"interpreter\": {\n    \"hash\": \"185c460d523eefc55d6b39dbbc1977f00a990069d85a8be858709cefa84b6425\"\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n",
            "title": "NVIDIA",
            "type": "notebook-grid"
          },
          {
            "cwd": "/home/runner/work/jupyter_app_launcher/jupyter_app_launcher/samples",
            "description": "Example of opening a notebook in dashboard mode without Voila",
            "id": "ece79271-90fe-4b72-bd65-39c49fd942b3",
            "source": "/home/runner/work/jupyter_app_launcher/jupyter_app_launcher/samples/sample.ipynb",
            "sourceCode": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"id\": \"a8da280e-cebd-4762-9d73-d60225f6c79c\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"try:\\n\",\n    \"    import piplite\\n\",\n    \"    await piplite.install(['ipywidgets==7.7.0', 'ipyflex', 'ipyleaflet'])\\n\",\n    \"except:\\n\",\n    \"    pass\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"id\": \"e5cf8261-0e2e-4a78-8366-40cc62ede883\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import ipywidgets\\n\",\n    \"import os\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"id\": \"d87541d9-58d8-4a42-9922-edbdfb90518c\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 7,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": false,\n        \"row\": 1,\n        \"width\": 5\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"39747f8b64e94ce38ddd6a247bd2b43d\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"IntSlider(value=0)\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"ipywidgets.IntSlider()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"id\": \"37d51c24-4f21-4089-8c62-f96ecefaf8fc\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 6,\n        \"height\": 14,\n        \"hidden\": false,\n        \"locked\": true,\n        \"row\": 3,\n        \"width\": 6\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"cbd262bbd9f340e7b8719b8dac7f1ae7\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"from ipyleaflet import Map, basemaps, basemap_to_tiles\\n\",\n    \"\\n\",\n    \"m = Map(\\n\",\n    \"    basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \\\"2017-04-08\\\"),\\n\",\n    \"    center=(52.204793, 360.121558),\\n\",\n    \"    zoom=4\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"m\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"id\": \"59e16c67-d06e-4caf-89c1-d7a6addb3589\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 4,\n        \"height\": 3,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": 18,\n        \"width\": 5\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"37f7c625686e47ca832121e87ceabf61\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"IntSlider(value=0)\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"ipywidgets.IntSlider()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"b7c5a2c3-5686-40b8-9d86-1c0325d9117d\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 0,\n        \"height\": 3,\n        \"hidden\": false,\n        \"locked\": true,\n        \"row\": 0,\n        \"width\": 12\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"source\": [\n    \"# Render a notebook as dashboard without Voila!\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"id\": \"add0b305-71da-4e4e-9026-65af5ba3614b\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import ipyflex\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"id\": \"0f31e190-31cd-481e-bd7a-1b4ef9285a23\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 0,\n        \"height\": 14,\n        \"hidden\": false,\n        \"locked\": true,\n        \"row\": 3,\n        \"width\": 6\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"b761af1782ea4087bb02e050dc3765b6\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"FlexLayout(children={'Widget 1': HTML(value='<h1>Widget 1</h1>'), 'Widget 2': HTML(value='<h1>Widget 2</h1>'),\u2026\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"widgets = {\\n\",\n    \"    'Widget 1' : ipywidgets.HTML('<h1>Widget 1</h1>'),\\n\",\n    \"    'Widget 2' : ipywidgets.HTML('<h1>Widget 2</h1>'),\\n\",\n    \"    'Widget 3' : ipywidgets.HTML('<h1>Widget 3</h1>'),\\n\",\n    \"    'Widget 4' : ipywidgets.HTML('<h1>Widget 4</h1>')\\n\",\n    \"}\\n\",\n    \"\\n\",\n    \"ipyflex.FlexLayout(widgets, style={'height':'400px'}, template='./layout.json', editable=False, header=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"id\": \"09809959-7398-42db-a20d-6097a06b0072\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    }\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"extensions\": {\n   \"jupyter_dashboards\": {\n    \"activeView\": \"grid_default\",\n    \"version\": 1,\n    \"views\": {\n     \"grid_default\": {\n      \"cellMargin\": 2,\n      \"defaultCellHeight\": 40,\n      \"maxColumns\": 12,\n      \"name\": \"grid\",\n      \"type\": \"grid\"\n     }\n    }\n   }\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.6\"\n  },\n  \"vscode\": {\n   \"interpreter\": {\n    \"hash\": \"185c460d523eefc55d6b39dbbc1977f00a990069d85a8be858709cefa84b6425\"\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n",
            "title": "Dashboard example",
            "type": "notebook-grid"
          },
          {
            "catalog": "Another catalog",
            "cwd": "/home/runner/work/jupyter_app_launcher/jupyter_app_launcher/samples",
            "description": "Example of opening a notebook in dashboard mode without Voila",
            "id": "7ebb9876-8617-42e0-b46a-f0f28aa24243",
            "source": "/home/runner/work/jupyter_app_launcher/jupyter_app_launcher/samples/sample.ipynb",
            "sourceCode": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"id\": \"a8da280e-cebd-4762-9d73-d60225f6c79c\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"try:\\n\",\n    \"    import piplite\\n\",\n    \"    await piplite.install(['ipywidgets==7.7.0', 'ipyflex', 'ipyleaflet'])\\n\",\n    \"except:\\n\",\n    \"    pass\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"id\": \"e5cf8261-0e2e-4a78-8366-40cc62ede883\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import ipywidgets\\n\",\n    \"import os\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"id\": \"d87541d9-58d8-4a42-9922-edbdfb90518c\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 7,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": false,\n        \"row\": 1,\n        \"width\": 5\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"39747f8b64e94ce38ddd6a247bd2b43d\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"IntSlider(value=0)\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"ipywidgets.IntSlider()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"id\": \"37d51c24-4f21-4089-8c62-f96ecefaf8fc\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 6,\n        \"height\": 14,\n        \"hidden\": false,\n        \"locked\": true,\n        \"row\": 3,\n        \"width\": 6\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"cbd262bbd9f340e7b8719b8dac7f1ae7\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"from ipyleaflet import Map, basemaps, basemap_to_tiles\\n\",\n    \"\\n\",\n    \"m = Map(\\n\",\n    \"    basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \\\"2017-04-08\\\"),\\n\",\n    \"    center=(52.204793, 360.121558),\\n\",\n    \"    zoom=4\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"m\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"id\": \"59e16c67-d06e-4caf-89c1-d7a6addb3589\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 4,\n        \"height\": 3,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": 18,\n        \"width\": 5\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"37f7c625686e47ca832121e87ceabf61\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"IntSlider(value=0)\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"ipywidgets.IntSlider()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"b7c5a2c3-5686-40b8-9d86-1c0325d9117d\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 0,\n        \"height\": 3,\n        \"hidden\": false,\n        \"locked\": true,\n        \"row\": 0,\n        \"width\": 12\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"source\": [\n    \"# Render a notebook as dashboard without Voila!\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"id\": \"add0b305-71da-4e4e-9026-65af5ba3614b\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import ipyflex\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"id\": \"0f31e190-31cd-481e-bd7a-1b4ef9285a23\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": 0,\n        \"height\": 14,\n        \"hidden\": false,\n        \"locked\": true,\n        \"row\": 3,\n        \"width\": 6\n       }\n      }\n     }\n    },\n    \"tags\": []\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": {\n       \"model_id\": \"b761af1782ea4087bb02e050dc3765b6\",\n       \"version_major\": 2,\n       \"version_minor\": 0\n      },\n      \"text/plain\": [\n       \"FlexLayout(children={'Widget 1': HTML(value='<h1>Widget 1</h1>'), 'Widget 2': HTML(value='<h1>Widget 2</h1>'),\u2026\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"widgets = {\\n\",\n    \"    'Widget 1' : ipywidgets.HTML('<h1>Widget 1</h1>'),\\n\",\n    \"    'Widget 2' : ipywidgets.HTML('<h1>Widget 2</h1>'),\\n\",\n    \"    'Widget 3' : ipywidgets.HTML('<h1>Widget 3</h1>'),\\n\",\n    \"    'Widget 4' : ipywidgets.HTML('<h1>Widget 4</h1>')\\n\",\n    \"}\\n\",\n    \"\\n\",\n    \"ipyflex.FlexLayout(widgets, style={'height':'400px'}, template='./layout.json', editable=False, header=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"id\": \"09809959-7398-42db-a20d-6097a06b0072\",\n   \"metadata\": {\n    \"extensions\": {\n     \"jupyter_dashboards\": {\n      \"activeView\": \"grid_default\",\n      \"views\": {\n       \"grid_default\": {\n        \"col\": null,\n        \"height\": 2,\n        \"hidden\": true,\n        \"locked\": true,\n        \"row\": null,\n        \"width\": 2\n       }\n      }\n     }\n    }\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"extensions\": {\n   \"jupyter_dashboards\": {\n    \"activeView\": \"grid_default\",\n    \"version\": 1,\n    \"views\": {\n     \"grid_default\": {\n      \"cellMargin\": 2,\n      \"defaultCellHeight\": 40,\n      \"maxColumns\": 12,\n      \"name\": \"grid\",\n      \"type\": \"grid\"\n     }\n    }\n   }\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.6\"\n  },\n  \"vscode\": {\n   \"interpreter\": {\n    \"hash\": \"185c460d523eefc55d6b39dbbc1977f00a990069d85a8be858709cefa84b6425\"\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n",
            "title": "Notebook example",
            "type": "notebook"
          },
          {
            "args": {
              "sandbox": [
                "allow-same-origin",
                "allow-scripts",
                "allow-downloads",
                "allow-modals",
                "allow-popups"
              ]
            },
            "catalog": "Another catalog",
            "description": "Example of opening a URL in a tab",
            "id": "cbdafe77-7c33-4dfd-bb5f-ddcdcd91fdc9",
            "source": "https://jupyterlab.readthedocs.io/en/stable/",
            "sourceCode": null,
            "title": "URL example",
            "type": "url"
          },
          {
            "catalog": "Another catalog",
            "description": "Example of opening a Markdown file in a tab",
            "id": "681b9dfc-34b7-4f7b-90d9-91c40db68bd6",
            "source": "/home/runner/work/jupyter_app_launcher/jupyter_app_launcher/samples/sample.md",
            "sourceCode": "# Hello world\n\n## Foo\n\n### Bar\n\nTo insert a mathematical formula we use the dollar symbol $, as follows:\n\nEuler's identity: $ e^{i \\pi} + 1 = 0 $\n\nTo isolate and center the formulas and enter in math display mode, we use 2 dollars symbol:\n\n$$\n...\n$$\n\nEuler's identity: $$ e^{i \\pi} + 1 = 0 $$\n",
            "title": "Markdown example",
            "type": "markdown"
          }
        ]
      }
    }
  },
  "jupyter-lite-schema-version": 0
}